#+title: Documentation for RRTM.
#+startup: indent

* Installing

There are three options for installation given below. They have progressively more dependencies but also offer more functionality. Each contains all the features of the previous package. 

If you have no intention to use RRTM with python, just install the first option.

If you want to use RRTM with python, try to install the third option as it contains everything from the first two options, with the added bonus of being faster if needed. If that proves difficult, fall back to the second option.

** Command line interface using NetCDF

Requires =gfortran=, =libgfortran=, =netcdf= and the =netcdf= development library.

Run =make cli_netcdf=. Copy =build/rrtm_nc= and =build/rrtm_sw_nc= into your path or working directory.

** Python interface with NetCDF

Requires dependencies given above plus =python=, =scipy= and =numpy=.

Run =make pymodule_netcdf=. Then copy =build/pyrrtm= to your python path.

** Python interface with optional native interface

Requires dependencies for the command line interface plus =cython= and =python-devel=. I have had some issues with old compilers. Best results come from recent versions of =gfortran=.

Run =make pymodule_native=. Then copy =build/pyrrtm= to your python path.

* Command Line Interface using NetCDF
** Long wave model
*** Model Inputs
**** Flags

There are many flags that affect the behaviour of RRTM. My code only supports changing some of them. All other flags defined in the RRTM documentation are set to zero.

- iscat :: Can be set to 0, 1 or 2.
  - 0 :: Use the RRTM radiative transfer solver with no scattering.
  - 1 :: Use DISORT radiative transfer solver with no scattering (slow).
  - 2 :: Use DISORT radiative transfer solver with scattering (slow). This is equivalent to mode 1 as there are no scattering aerosols here.

- numangs :: 0, 1, 2, 3 or 4. The behaviour of this flag is affected by iscat. In all cases, the higher the number, the slower the calculation but the more accurate it is. If iscat is 1 or 2, numangs must be 0, 1 or 2.

- ireflect :: 0 or 1.
  - 0 :: Lambertian reflection at surface (radiance equal at all angles).
  - 1 :: Specular reflection at surface.

**** Data

All input data is given below, with the size of the array given. The arrays are given in C order, so fastest axis last. The vertical structure is given in layers and levels. The number of levels is one more than the number of layers. The lowest level is always given first in the array, and also defines the surface pressure.

- semis :: Surface emissivity in each long wave band, and takes values from 0 to 1. There are 16 bands.

- tbound :: Temperature at surface (K).

- tavel(nlayers) :: Layer average temperature (K).

- tz(nlevels) :: Level temperature (K).

- pavel(nlayers) :: Layer average pressure (hPa).

- pz(nlevels) :: Level pressure (hPa).

- wkl(nlayers,nmol) :: Defines the concentration in each layer of the chemical species in the column. Up to 7 species are given, and are ordered as H2O, CO2, O3, N2O, CO, CH4, O2. (molecules/cm**2 or volume mixing ratio; all species must have the same units).

- wbrodl(nlayers) :: The broadening gases not in wkl. This can be derived from the temperature and pressure structure. (molecules/cm**2).

The strange unit molecules/cm**2 is defined for a layer, and is equal to the molecular density (molecules/cm**3) multiplied by the layer depth in cm.

*** Command line interface

Usage: rrtm_nc [-v[v]] -i <input file> -o <output file>

The input file must be defined as given below. The program will always overwrite any preexisting output file. The -v and -vv flags control the verbosity of the output.

**** Input file

This must be a netcdf file with the following structure. Extra variables etc are permitted.

netcdf {
dimensions:
	layer = nlayers ;
	level = nlayers + 1 ;
	mol = nmol ;
variables:
	double wkl(layer, mol) ;
	double wbrodl(layer) ;
	double tz(level) ;
	double tavel(layer) ;
	double pz(level) ;
	double pavel(layer) ;

// global attributes:
		:lw_ireflect  ;
		:lw_iscat ;
		:lw_tbound ;
		:lw_numangs ;
      :lw_semis ;
}

** Short wave model
*** Model Inputs
**** Flags

All flags not given here are set to zero automatically.

- nstr :: Can be set to 0, 1 or 2. Affects the number of streams used in the DISORT calculation. The higher nstr, the higher the number of streams.

- ireflect :: 0 or 1.
  - 0 :: Lambertian reflection at surface (radiance equal at all angles).
  - 1 :: Specular reflection at surface.

**** Data

All input data is given below, with the size of the array given. The arrays are given in C order, so fastest axis last. The vertical structure is given in layers and levels. The number of levels is one more than the number of layers. The lowest level is always given first in the array, and also defines the surface pressure.

- semis :: Surface emissivity in the short wave. Takes values from 0 to 1. Albedo = 1 - semis.

- solvar :: Solar variability -- a scaling factor applied to the solar constant.

- juldat :: Julian day (1 -- 365) used to compute a correction using the earth-sun distance. 0 = no earth-sun distance correction.

- sza :: Solar zenith angle (degrees, 0 = overhead).

- tavel(nlayers) :: Layer average temperature (K).

- tz(nlevels) :: Level temperature (K).

- pavel(nlayers) :: Layer average pressure (hPa).

- pz(nlevels) :: Level pressure (hPa).

- wkl(nlayers,nmol) :: Defines the concentration in each layer of the chemical species in the column. Up to 7 species are given, and are ordered as H2O, CO2, O3, N2O, CO, CH4, O2. (molecules/cm**2 or volume mixing ratio; all species must have the same units).

- wbrodl(nlayers) :: The broadening gases not in wkl. This can be derived from the temperature and pressure structure. (molecules/cm**2).

The strange unit molecules/cm**2 is defined for a layer, and is equal to the molecular density (molecules/cm**3) multiplied by the layer depth in cm.

*** Command line interface

Usage: rrtm_sw_nc [-v[v]] -i <input file> -o <output file>

The input file must be defined as given below. The program will always overwrite any preexisting output file. The -v and -vv flags control the verbosity of the output.

**** Input file

This must be a netcdf file with the following structure. Extra variables etc are permitted. Note that this allows a combined input file to be used for both the longwave and shortwave code.

netcdf {
dimensions:
	layer = nlayers ;
	level = nlayers + 1 ;
	mol = nmol ;
variables:
	double wkl(layer, mol) ;
	double wbrodl(layer) ;
	double tz(level) ;
	double tavel(layer) ;
	double pz(level) ;
	double pavel(layer) ;

// global attributes:
		:sw_ireflect  ;
		:sw_nstr ;
      :sw_semis ;
      :sw_solvar ;
      :sw_juldat ;
      :sw_sza ;
}

* Python Interface

The longwave code is accessed using the =LW= object. The shortwave code is accessed using the =SW= object. Both have many shared features so will be discussed together.

The basic usage is as follows

#+BEGIN_SRC python
  import pyrrtm

  # create an instance of the LW or SW class, specifying the number of layers.
  lw = pyrrtm.LW(nlayers)

  # set the required attributes:
  lw.tavel = ...
  lw.pavel = ...
  ...

  # set chemical species concentrations:
  lw.set_species('h2o', h2o_conc, units='vmr')
  lw.set_species('co2', co2_conc, units='vmr')
  ...

  # run the model:
  output = lw.run()

  # use the output - e.g. print the heating rate:
  print output.htr
#+END_SRC

See =tests/*.py= for various simple working examples.

** Attributes in both LW and SW

The vertical structure is given in layers and levels. The number of levels is one more than the number of layers. The lowest level is always given first in the array, and also defines the surface pressure.

- =semis= :: Surface emissivity from 0 to 1. Scalar. Defaults to 1.

- =tavel[nlayers]= :: Layer average temperature (K).

- =tz[nlevels]= :: Level temperature (K).

- =pavel[nlayers]= :: Layer average pressure (hPa).

- =pz[nlevels]= :: Level pressure (hPa).

If =tavel= and =pavel= are given, =tz= and =pz= do not need to be specified, although they can be specified if known. Likewise, if =tz= and =pz= are given, =tavel= and =pavel= do not need to be specified.

** Attributes in LW only

There are many flags that affect the behaviour of RRTM. My code only supports changing some of them. All other flags defined in the RRTM documentation are set to zero. There are default values for these attributes.

- =iscat= :: Can be set to 0, 1 or 2.
  - 0 :: Use the RRTM radiative transfer solver with no scattering.
  - 1 :: Use DISORT radiative transfer solver with no scattering (slow).
  - 2 :: Use DISORT radiative transfer solver with scattering (slow). This is equivalent to mode 1 as there are no scattering aerosols here.

- =numangs= :: 0, 1, 2 or 3. The behaviour of this flag is affected by iscat. In all cases, the higher the number, the slower the calculation but the more accurate it is. If iscat is 1 or 2, numangs must be 0, 1 or 2.

- =ireflect= :: 0 or 1.
  - 0 :: Lambertian reflection at surface (radiance equal at all angles).
  - 1 :: Specular reflection at surface.

- tbound :: Surface temperature (K). If tbound is set to -1, use =tz[0]=.

** Attributes in SW only

There are many flags that affect the behaviour of RRTM. My code only supports changing some of them. All other flags defined in the RRTM documentation are set to zero. There are default values for these attributes.

- =nstr= :: Can be set to 0, 1 or 2. Affects the number of streams used in the DISORT calculation. The higher nstr, the higher the number of streams.

- =ireflect= :: 0 or 1.
  - 0 :: Lambertian reflection at surface (radiance equal at all angles).
  - 1 :: Specular reflection at surface.

** Setting chemical species

Both =LW= and =SW= have the methods =set_species= and =get_species=. Supported chemicals are H2O, CO2, O3, N2O, CO, CH4 and O2. They do not need to be set if not known, and will default to zero. Chemical concentrations can be given in units of volume mixing ratio (vmr), mass mixing ratio (mmr), and molecules/cm2 (used internally in RRTM but of little practical use).

** Output format

Both =LW.run= and =SW.run= return an =Output= object with the following attributes:

- =totuflux[nlevels]= :: Upwelling flux at each level (W/m2).
- =totdflux[nlevels]= :: Downwelling flux at each level (W/m2).
- =fnet[nlevels]= :: Net flux at each level. Is the difference of the upwelling and downwelling fluxes (W/m2).
- =htr[nlayers]= :: Heating rate for each layer (K/day).
